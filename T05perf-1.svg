<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>std::ostream::_M_insert&lt;long&gt; (252,525,250 samples, 0.03%)</title><rect x="1033.5" y="453" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1036.49" y="463.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (353,535,350 samples, 0.04%)</title><rect x="869.6" y="309" width="0.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="872.64" y="319.5" ></text>
</g>
<g >
<title>UWorkStealingQueue::tryPop (5,747,474,690 samples, 0.70%)</title><rect x="311.6" y="373" width="8.2" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="314.60" y="383.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@plt (353,535,350 samples, 0.04%)</title><rect x="290.8" y="325" width="0.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="293.83" y="335.5" ></text>
</g>
<g >
<title>__fget_files (272,727,270 samples, 0.03%)</title><rect x="887.7" y="389" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="890.73" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::_Tuple_impl (181,818,180 samples, 0.02%)</title><rect x="79.5" y="325" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="82.51" y="335.5" ></text>
</g>
<g >
<title>std::endl&lt;char, std::char_traits&lt;char&gt; &gt; (121,212,120 samples, 0.01%)</title><rect x="1027.1" y="197" width="0.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1030.13" y="207.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (191,919,190 samples, 0.02%)</title><rect x="1035.1" y="501" width="0.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1038.08" y="511.5" ></text>
</g>
<g >
<title>_IO_file_overflow@@GLIBC_2.2.5 (141,414,140 samples, 0.02%)</title><rect x="883.8" y="469" width="0.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="886.82" y="479.5" ></text>
</g>
<g >
<title>futex_wait_setup (333,333,330 samples, 0.04%)</title><rect x="141.1" y="213" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="144.07" y="223.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::shared_mutex&gt;::lock (121,212,120 samples, 0.01%)</title><rect x="1026.4" y="165" width="0.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1029.44" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (121,212,120 samples, 0.01%)</title><rect x="1033.0" y="453" width="0.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1035.96" y="463.5" ></text>
</g>
<g >
<title>__pthread_rwlock_rdlock (1,424,242,410 samples, 0.17%)</title><rect x="1027.9" y="485" width="2.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1030.88" y="495.5" ></text>
</g>
<g >
<title>__audit_syscall_exit (6,959,595,890 samples, 0.84%)</title><rect x="854.4" y="293" width="9.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="857.35" y="303.5" ></text>
</g>
<g >
<title>finish_task_switch (626,262,620 samples, 0.08%)</title><rect x="1030.9" y="341" width="0.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1033.88" y="351.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;1ul, std::default_delete&lt;UTaskWrapper::implBase&gt;, true&gt;::_Head_base (161,616,160 samples, 0.02%)</title><rect x="80.9" y="293" width="0.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="83.86" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (121,212,120 samples, 0.01%)</title><rect x="1025.7" y="69" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1028.69" y="79.5" ></text>
</g>
<g >
<title>std::mutex::try_lock (222,222,220 samples, 0.03%)</title><rect x="269.5" y="357" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="272.54" y="367.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, UTaskWrapper::implBase*, false&gt;::_Head_base (171,717,170 samples, 0.02%)</title><rect x="80.0" y="309" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="82.97" y="319.5" ></text>
</g>
<g >
<title>all (826,373,729,110 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (5,878,787,820 samples, 0.71%)</title><rect x="258.4" y="325" width="8.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="261.37" y="335.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (303,030,300 samples, 0.04%)</title><rect x="283.9" y="341" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="286.92" y="351.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="389" width="4.9" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1025.99" y="399.5" ></text>
</g>
<g >
<title>__pthread_mutex_trylock (11,060,605,950 samples, 1.34%)</title><rect x="237.7" y="325" width="15.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="240.67" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;UTaskWrapper::implBase, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::_M_ptr (10,727,272,620 samples, 1.30%)</title><rect x="90.0" y="357" width="15.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="93.04" y="367.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (353,535,350 samples, 0.04%)</title><rect x="869.6" y="341" width="0.5" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="872.64" y="351.5" ></text>
</g>
<g >
<title>__gthread_active_p (191,919,190 samples, 0.02%)</title><rect x="139.1" y="309" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="142.06" y="319.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (80,808,080 samples, 0.01%)</title><rect x="891.9" y="341" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="894.91" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (262,838,381,210 samples, 31.81%)</title><rect x="494.3" y="341" width="375.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="497.33" y="351.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>new_do_write (111,111,110 samples, 0.01%)</title><rect x="1189.8" y="501" width="0.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1192.84" y="511.5" ></text>
</g>
<g >
<title>file_has_perm (313,131,310 samples, 0.04%)</title><rect x="888.7" y="389" width="0.5" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="891.74" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (181,818,180 samples, 0.02%)</title><rect x="1025.6" y="117" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1028.63" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (242,424,240 samples, 0.03%)</title><rect x="1023.8" y="101" width="0.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1026.77" y="111.5" ></text>
</g>
<g >
<title>__x64_sys_futex (57,262,625,690 samples, 6.93%)</title><rect x="1108.0" y="453" width="81.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1110.97" y="463.5" >__x64_sys..</text>
</g>
<g >
<title>__pthread_rwlock_unlock (58,444,443,860 samples, 7.07%)</title><rect x="1106.4" y="501" width="83.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1109.39" y="511.5" >__pthread..</text>
</g>
<g >
<title>__pthread_rwlock_unlock (101,010,100 samples, 0.01%)</title><rect x="1025.1" y="133" width="0.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1028.07" y="143.5" ></text>
</g>
<g >
<title>std::mutex::unlock (494,949,490 samples, 0.06%)</title><rect x="269.9" y="357" width="0.7" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="272.85" y="367.5" ></text>
</g>
<g >
<title>CObject::CObject (141,414,140 samples, 0.02%)</title><rect x="76.8" y="341" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="79.84" y="351.5" ></text>
</g>
<g >
<title>__gthread_active_p (131,313,130 samples, 0.02%)</title><rect x="254.2" y="325" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="257.23" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_futex (888,888,880 samples, 0.11%)</title><rect x="1030.7" y="437" width="1.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1033.69" y="447.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (131,313,130 samples, 0.02%)</title><rect x="1023.9" y="53" width="0.2" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1026.93" y="63.5" ></text>
</g>
<g >
<title>__gthread_active_p (6,656,565,590 samples, 0.81%)</title><rect x="215.3" y="325" width="9.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="218.26" y="335.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (111,111,110 samples, 0.01%)</title><rect x="178.9" y="293" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="181.87" y="303.5" ></text>
</g>
<g >
<title>std::mutex::unlock (9,323,232,230 samples, 1.13%)</title><rect x="253.8" y="341" width="13.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="256.77" y="351.5" ></text>
</g>
<g >
<title>do_futex (434,343,430 samples, 0.05%)</title><rect x="140.9" y="245" width="0.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="143.92" y="255.5" ></text>
</g>
<g >
<title>__pthread_once_slow (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="485" width="4.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1025.99" y="495.5" ></text>
</g>
<g >
<title>UTaskWrapper::UTaskWrapper (6,181,818,120 samples, 0.75%)</title><rect x="74.4" y="373" width="8.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="77.39" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (161,616,160 samples, 0.02%)</title><rect x="1025.7" y="101" width="0.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1028.66" y="111.5" ></text>
</g>
<g >
<title>UThreadPrimary::run (611,252,519,140 samples, 73.97%)</title><rect x="10.7" y="405" width="872.8" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="13.66" y="415.5" >UThreadPrimary::run</text>
</g>
<g >
<title>std::ostream::put (80,808,080 samples, 0.01%)</title><rect x="1032.7" y="453" width="0.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1035.68" y="463.5" ></text>
</g>
<g >
<title>UThreadBase::popPoolTask (262,626,260 samples, 0.03%)</title><rect x="46.6" y="389" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="49.64" y="399.5" ></text>
</g>
<g >
<title>std::min&lt;int&gt; (191,919,190 samples, 0.02%)</title><rect x="341.7" y="373" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="344.71" y="383.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;UTaskWrapper::implBase, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::~unique_ptr (6,585,858,520 samples, 0.80%)</title><rect x="871.6" y="373" width="9.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="874.57" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;UThreadPrimary*, std::allocator&lt;UThreadPrimary*&gt; &gt;::size (212,121,210 samples, 0.03%)</title><rect x="882.0" y="373" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="885.04" y="383.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (282,828,280 samples, 0.03%)</title><rect x="211.6" y="341" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="214.57" y="351.5" ></text>
</g>
<g >
<title>__sched_text_start (636,363,630 samples, 0.08%)</title><rect x="1030.9" y="357" width="0.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1033.87" y="367.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (171,717,170 samples, 0.02%)</title><rect x="138.5" y="325" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="141.51" y="335.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (222,222,220 samples, 0.03%)</title><rect x="206.3" y="357" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="209.27" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (191,919,190 samples, 0.02%)</title><rect x="10.0" y="469" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="13.01" y="479.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (80,808,080 samples, 0.01%)</title><rect x="341.6" y="357" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="344.60" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (95,646,463,690 samples, 11.57%)</title><rect x="886.0" y="453" width="136.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="889.04" y="463.5" >do_syscall_64</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (9,797,979,700 samples, 1.19%)</title><rect x="182.7" y="293" width="14.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="185.72" y="303.5" ></text>
</g>
<g >
<title>std::mutex::try_lock (27,656,565,380 samples, 3.35%)</title><rect x="214.3" y="341" width="39.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="217.28" y="351.5" >std..</text>
</g>
<g >
<title>finish_task_switch (80,808,080 samples, 0.01%)</title><rect x="141.0" y="165" width="0.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="143.95" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (70,707,070 samples, 0.01%)</title><rect x="1024.6" y="101" width="0.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1027.59" y="111.5" ></text>
</g>
<g >
<title>std::shared_mutex::unlock (121,212,120 samples, 0.01%)</title><rect x="1026.7" y="149" width="0.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1029.65" y="159.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::_M_head (181,818,180 samples, 0.02%)</title><rect x="121.2" y="309" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="124.22" y="319.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="405" width="4.9" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1025.99" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_state&lt;std::_Bind&lt;int  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="325" width="4.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1025.99" y="335.5" ></text>
</g>
<g >
<title>fsnotify (131,313,130 samples, 0.02%)</title><rect x="888.3" y="405" width="0.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="891.33" y="415.5" ></text>
</g>
<g >
<title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;int&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::_Bind&lt;int  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="341" width="4.9" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1025.99" y="351.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;UTaskWrapper::implBase, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::__uniq_ptr_impl (1,929,292,910 samples, 0.23%)</title><rect x="79.4" y="341" width="2.7" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="82.38" y="351.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock@plt (222,222,220 samples, 0.03%)</title><rect x="266.8" y="325" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="269.77" y="335.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;UTaskWrapper::implBase, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::unique_ptr&lt;std::default_delete&lt;UTaskWrapper::implBase&gt;, void&gt; (787,878,780 samples, 0.10%)</title><rect x="870.4" y="373" width="1.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="873.45" y="383.5" ></text>
</g>
<g >
<title>__gthread_mutex_trylock (9,040,403,950 samples, 1.09%)</title><rect x="224.8" y="325" width="12.9" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="227.77" y="335.5" ></text>
</g>
<g >
<title>CObject::~CObject (2,181,818,160 samples, 0.26%)</title><rect x="86.9" y="341" width="3.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="89.92" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (919,191,910 samples, 0.11%)</title><rect x="140.3" y="293" width="1.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="143.29" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;UTaskWrapper::implBase, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::~unique_ptr (21,737,373,520 samples, 2.63%)</title><rect x="105.4" y="357" width="31.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="108.35" y="367.5" >st..</text>
</g>
<g >
<title>futex_wake (8,929,292,840 samples, 1.08%)</title><rect x="183.9" y="229" width="12.7" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="186.89" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (70,707,070 samples, 0.01%)</title><rect x="1025.5" y="117" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1028.51" y="127.5" ></text>
</g>
<g >
<title>finish_task_switch (626,262,620 samples, 0.08%)</title><rect x="1028.8" y="341" width="0.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1031.80" y="351.5" ></text>
</g>
<g >
<title>pty_write_room (90,909,090 samples, 0.01%)</title><rect x="1021.5" y="373" width="0.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1024.46" y="383.5" ></text>
</g>
<g >
<title>[unknown] (454,545,450 samples, 0.06%)</title><rect x="10.0" y="485" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.01" y="495.5" ></text>
</g>
<g >
<title>std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ostream (535,353,530 samples, 0.06%)</title><rect x="1032.0" y="485" width="0.8" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1035.05" y="495.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (444,444,440 samples, 0.05%)</title><rect x="869.0" y="293" width="0.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="872.01" y="303.5" ></text>
</g>
<g >
<title>mark_wake_futex (80,808,080 samples, 0.01%)</title><rect x="1108.4" y="405" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1111.41" y="415.5" ></text>
</g>
<g >
<title>std::mutex::lock (252,525,250 samples, 0.03%)</title><rect x="203.3" y="341" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="206.30" y="351.5" ></text>
</g>
<g >
<title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="373" width="4.9" height="15.0" fill="rgb(241,170,40)" rx="2" ry="2" />
<text  x="1025.99" y="383.5" ></text>
</g>
<g >
<title>__gthread_mutex_trylock (444,444,440 samples, 0.05%)</title><rect x="283.3" y="341" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="286.28" y="351.5" ></text>
</g>
<g >
<title>tty_buffer_space_avail (121,212,120 samples, 0.01%)</title><rect x="1021.6" y="373" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1024.59" y="383.5" ></text>
</g>
<g >
<title>hash_futex (70,707,070 samples, 0.01%)</title><rect x="184.7" y="213" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="187.73" y="223.5" ></text>
</g>
<g >
<title>std::ostream::operator&lt;&lt; (111,111,110 samples, 0.01%)</title><rect x="1027.6" y="197" width="0.2" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1030.62" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,222,222,210 samples, 0.15%)</title><rect x="1028.2" y="453" width="1.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1031.15" y="463.5" ></text>
</g>
<g >
<title>selinux_file_permission (323,232,320 samples, 0.04%)</title><rect x="889.2" y="389" width="0.4" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="892.18" y="399.5" ></text>
</g>
<g >
<title>do_futex (878,787,870 samples, 0.11%)</title><rect x="1030.7" y="421" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1033.71" y="431.5" ></text>
</g>
<g >
<title>UThreadObject::~UThreadObject (2,787,878,760 samples, 0.34%)</title><rect x="86.1" y="357" width="3.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="89.06" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::tuple&lt;UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt;, true&gt; (1,656,565,640 samples, 0.20%)</title><rect x="79.8" y="325" width="2.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="82.77" y="335.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;UTaskWrapper::implBase, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::_M_ptr (12,080,807,960 samples, 1.46%)</title><rect x="108.2" y="341" width="17.2" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="111.17" y="351.5" ></text>
</g>
<g >
<title>std::_Bind&lt;int  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="261" width="4.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1025.99" y="271.5" ></text>
</g>
<g >
<title>do_sched_yield (32,757,575,430 samples, 3.96%)</title><rect x="624.5" y="293" width="46.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="627.54" y="303.5" >do_s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (111,111,110 samples, 0.01%)</title><rect x="1024.6" y="165" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1027.56" y="175.5" ></text>
</g>
<g >
<title>__gthread_active_p (121,212,120 samples, 0.01%)</title><rect x="180.7" y="309" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="183.73" y="319.5" ></text>
</g>
<g >
<title>schedule (656,565,650 samples, 0.08%)</title><rect x="1030.8" y="373" width="1.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1033.84" y="383.5" ></text>
</g>
<g >
<title>std::__addressof&lt;char&gt; (70,707,070 samples, 0.01%)</title><rect x="1026.3" y="133" width="0.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1029.25" y="143.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (252,525,250 samples, 0.03%)</title><rect x="852.1" y="309" width="0.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="855.12" y="319.5" ></text>
</g>
<g >
<title>UThreadPrimary::runTask (584,727,266,880 samples, 70.76%)</title><rect x="47.5" y="389" width="835.0" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="50.54" y="399.5" >UThreadPrimary::runTask</text>
</g>
<g >
<title>pthread_mutex_unlock@plt (383,838,380 samples, 0.05%)</title><rect x="305.1" y="325" width="0.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="308.10" y="335.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (90,909,090 samples, 0.01%)</title><rect x="140.9" y="213" width="0.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="143.94" y="223.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (676,767,670 samples, 0.08%)</title><rect x="1030.8" y="389" width="1.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1033.81" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_lock (161,616,160 samples, 0.02%)</title><rect x="184.4" y="213" width="0.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="187.41" y="223.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (70,707,070 samples, 0.01%)</title><rect x="120.9" y="277" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="123.87" y="287.5" ></text>
</g>
<g >
<title>do_futex (57,202,019,630 samples, 6.92%)</title><rect x="1108.1" y="437" width="81.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1111.06" y="447.5" >do_futex</text>
</g>
<g >
<title>std::min&lt;int&gt; (191,919,190 samples, 0.02%)</title><rect x="306.7" y="357" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="309.71" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt; (3,111,111,080 samples, 0.38%)</title><rect x="121.0" y="325" width="4.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="123.97" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;, std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;&amp;, std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;*&gt; (545,454,540 samples, 0.07%)</title><rect x="204.7" y="309" width="0.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="207.73" y="319.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (353,535,350 samples, 0.04%)</title><rect x="869.6" y="325" width="0.5" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="872.64" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;UTaskWrapper, UTaskWrapper&amp;, UTaskWrapper*&gt; (1,363,636,350 samples, 0.17%)</title><rect x="267.1" y="341" width="1.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="270.08" y="351.5" ></text>
</g>
<g >
<title>futex_wait_setup (131,313,130 samples, 0.02%)</title><rect x="1031.8" y="389" width="0.2" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1034.77" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,111,111,100 samples, 0.13%)</title><rect x="1030.4" y="469" width="1.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1033.43" y="479.5" ></text>
</g>
<g >
<title>tty_write (93,080,807,150 samples, 11.26%)</title><rect x="889.6" y="405" width="133.0" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="892.65" y="415.5" >tty_write</text>
</g>
<g >
<title>std::deque&lt;UTaskWrapper, std::allocator&lt;UTaskWrapper&gt; &gt;::empty (1,616,161,600 samples, 0.20%)</title><rect x="212.0" y="341" width="2.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="214.97" y="351.5" ></text>
</g>
<g >
<title>std::mutex::try_lock (343,434,340 samples, 0.04%)</title><rect x="307.0" y="357" width="0.5" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="309.98" y="367.5" ></text>
</g>
<g >
<title>kfree (797,979,790 samples, 0.10%)</title><rect x="861.1" y="277" width="1.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="864.12" y="287.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (70,707,070 samples, 0.01%)</title><rect x="120.9" y="293" width="0.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="123.87" y="303.5" ></text>
</g>
<g >
<title>std::queue&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;, std::deque&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt; &gt; &gt; &gt;::empty (343,434,340 samples, 0.04%)</title><rect x="207.1" y="357" width="0.5" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="210.11" y="367.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (90,909,090 samples, 0.01%)</title><rect x="1024.0" y="37" width="0.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1026.99" y="47.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::overflow (181,818,180 samples, 0.02%)</title><rect x="884.5" y="469" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="887.48" y="479.5" ></text>
</g>
<g >
<title>std::mutex::unlock (10,030,302,930 samples, 1.21%)</title><rect x="291.3" y="341" width="14.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="294.33" y="351.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="437" width="4.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1025.99" y="447.5" ></text>
</g>
<g >
<title>__fget_light (484,848,480 samples, 0.06%)</title><rect x="887.4" y="405" width="0.7" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="890.42" y="415.5" ></text>
</g>
<g >
<title>std::shared_mutex::lock_shared (111,111,110 samples, 0.01%)</title><rect x="1024.9" y="165" width="0.2" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1027.89" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_sched_yield (165,525,250,870 samples, 20.03%)</title><rect x="615.8" y="309" width="236.3" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="618.76" y="319.5" >__x64_sys_sched_yield</text>
</g>
<g >
<title>_copy_from_user (272,727,270 samples, 0.03%)</title><rect x="890.8" y="389" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="893.77" y="399.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;int  (611,414,135,300 samples, 73.99%)</title><rect x="10.7" y="469" width="873.0" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="13.66" y="479.5" >std::thread::_Invoker&lt;std::tuple&lt;int </text>
</g>
<g >
<title>prepare_exit_to_usermode (111,111,110 samples, 0.01%)</title><rect x="178.9" y="277" width="0.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="181.87" y="287.5" ></text>
</g>
<g >
<title>_IO_file_write@@GLIBC_2.2.5 (70,707,070 samples, 0.01%)</title><rect x="1034.0" y="501" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1036.98" y="511.5" ></text>
</g>
<g >
<title>std::mutex::unlock (16,171,717,010 samples, 1.96%)</title><rect x="180.2" y="325" width="23.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="183.21" y="335.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (363,636,360 samples, 0.04%)</title><rect x="1025.5" y="133" width="0.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1028.47" y="143.5" ></text>
</g>
<g >
<title>__check_object_size (111,111,110 samples, 0.01%)</title><rect x="890.6" y="389" width="0.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="893.57" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (95,646,463,690 samples, 11.57%)</title><rect x="886.0" y="469" width="136.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="889.04" y="479.5" >entry_SYSCALL_64_..</text>
</g>
<g >
<title>std::vector&lt;UThreadPrimary*, std::allocator&lt;UThreadPrimary*&gt; &gt;::operator[] (1,494,949,480 samples, 0.18%)</title><rect x="308.0" y="357" width="2.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="311.02" y="367.5" ></text>
</g>
<g >
<title>vfs_write (94,141,413,200 samples, 11.39%)</title><rect x="888.1" y="421" width="134.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="891.13" y="431.5" >vfs_write</text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (101,010,100 samples, 0.01%)</title><rect x="882.3" y="373" width="0.2" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="885.35" y="383.5" ></text>
</g>
<g >
<title>do_futex (8,959,595,870 samples, 1.08%)</title><rect x="183.8" y="245" width="12.8" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="186.85" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;UTaskWrapper, std::allocator&lt;UTaskWrapper&gt; &gt;::empty (353,535,350 samples, 0.04%)</title><rect x="269.0" y="357" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="272.03" y="367.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (80,808,080 samples, 0.01%)</title><rect x="341.6" y="341" width="0.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="344.60" y="351.5" ></text>
</g>
<g >
<title>std::operator==&lt;UTaskWrapper, UTaskWrapper&amp;, UTaskWrapper*&gt; (1,323,232,310 samples, 0.16%)</title><rect x="212.4" y="325" width="1.9" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="215.39" y="335.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="453" width="4.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1025.99" y="463.5" ></text>
</g>
<g >
<title>__pthread_mutex_trylock (797,979,790 samples, 0.10%)</title><rect x="289.7" y="325" width="1.1" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="292.69" y="335.5" ></text>
</g>
<g >
<title>std::__invoke&lt;std::_Bind&lt;int  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="309" width="4.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1025.99" y="319.5" ></text>
</g>
<g >
<title>UThreadBase::popPoolTask (49,868,686,370 samples, 6.03%)</title><rect x="136.4" y="373" width="71.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="139.39" y="383.5" >UThreadB..</text>
</g>
<g >
<title>MyReadParamNode::run (1,353,535,340 samples, 0.16%)</title><rect x="1023.4" y="197" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1026.35" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt; &gt; &gt;::empty (777,777,770 samples, 0.09%)</title><rect x="204.4" y="325" width="1.1" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="207.40" y="335.5" ></text>
</g>
<g >
<title>__pthread_mutex_trylock (49,585,858,090 samples, 6.00%)</title><rect x="1035.6" y="501" width="70.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1038.58" y="511.5" >__pthrea..</text>
</g>
<g >
<title>syscall_slow_exit_work (8,242,424,160 samples, 1.00%)</title><rect x="852.5" y="309" width="11.8" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="855.52" y="319.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (101,010,100 samples, 0.01%)</title><rect x="882.3" y="357" width="0.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="885.35" y="367.5" ></text>
</g>
<g >
<title>std::this_thread::yield (484,848,480 samples, 0.06%)</title><rect x="882.8" y="389" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="885.78" y="399.5" ></text>
</g>
<g >
<title>down_read (101,010,100 samples, 0.01%)</title><rect x="895.6" y="373" width="0.1" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="898.56" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_futex (979,797,970 samples, 0.12%)</title><rect x="1028.4" y="437" width="1.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1031.43" y="447.5" ></text>
</g>
<g >
<title>ksys_write (94,686,867,740 samples, 11.46%)</title><rect x="887.4" y="437" width="135.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="890.35" y="447.5" >ksys_write</text>
</g>
<g >
<title>std::ostream::sentry::~sentry (141,414,140 samples, 0.02%)</title><rect x="884.9" y="469" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="887.93" y="479.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (191,919,190 samples, 0.02%)</title><rect x="139.3" y="309" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="142.34" y="319.5" ></text>
</g>
<g >
<title>std::shared_lock&lt;std::shared_mutex&gt;::shared_lock (141,414,140 samples, 0.02%)</title><rect x="1024.9" y="181" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1027.85" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;UThreadPrimary*, std::allocator&lt;UThreadPrimary*&gt; &gt;::operator[] (747,474,740 samples, 0.09%)</title><rect x="881.0" y="373" width="1.0" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="883.98" y="383.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int  (611,414,135,300 samples, 73.99%)</title><rect x="10.7" y="485" width="873.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="13.66" y="495.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;int </text>
</g>
<g >
<title>__lll_lock_wait (1,393,939,380 samples, 0.17%)</title><rect x="139.6" y="309" width="2.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="142.61" y="319.5" ></text>
</g>
<g >
<title>syscall_trace_enter (3,747,474,710 samples, 0.45%)</title><rect x="864.3" y="309" width="5.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="867.29" y="319.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (696,969,690 samples, 0.08%)</title><rect x="1028.7" y="389" width="1.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1031.70" y="399.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (4,404,040,360 samples, 0.53%)</title><rect x="196.7" y="309" width="6.3" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="199.74" y="319.5" ></text>
</g>
<g >
<title>try_to_wake_up (56,868,686,300 samples, 6.88%)</title><rect x="1108.5" y="389" width="81.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1111.54" y="399.5" >try_to_wa..</text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (131,313,130 samples, 0.02%)</title><rect x="1033.6" y="437" width="0.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1036.58" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt; &gt; &gt;::empty (303,030,300 samples, 0.04%)</title><rect x="137.5" y="341" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="140.50" y="351.5" ></text>
</g>
<g >
<title>UThreadPrimary::stealTask (28,737,373,450 samples, 3.48%)</title><rect x="270.6" y="373" width="41.0" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="273.56" y="383.5" >UTh..</text>
</g>
<g >
<title>futex_wait (858,585,850 samples, 0.10%)</title><rect x="1030.7" y="405" width="1.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1033.74" y="415.5" ></text>
</g>
<g >
<title>UTaskWrapper::UTaskWrapper (848,484,840 samples, 0.10%)</title><rect x="30.7" y="389" width="1.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="33.67" y="399.5" ></text>
</g>
<g >
<title>finish_task_switch (95,606,059,650 samples, 11.57%)</title><rect x="715.6" y="261" width="136.5" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="718.60" y="271.5" >finish_task_switch</text>
</g>
<g >
<title>UThreadPrimary::popTask (43,545,454,110 samples, 5.27%)</title><rect x="208.4" y="373" width="62.2" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="211.38" y="383.5" >UThrea..</text>
</g>
<g >
<title>path_put (484,848,480 samples, 0.06%)</title><rect x="862.6" y="277" width="0.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="865.63" y="287.5" ></text>
</g>
<g >
<title>try_to_wake_up (8,272,727,190 samples, 1.00%)</title><rect x="184.8" y="197" width="11.8" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="187.83" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (919,191,910 samples, 0.11%)</title><rect x="140.3" y="277" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="143.29" y="287.5" ></text>
</g>
<g >
<title>std::this_thread::yield (370,090,905,390 samples, 44.78%)</title><rect x="342.0" y="373" width="528.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="344.99" y="383.5" >std::this_thread::yield</text>
</g>
<g >
<title>GParamManager::get (414,141,410 samples, 0.05%)</title><rect x="1025.4" y="165" width="0.6" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1028.40" y="175.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;int, std::_Bind&lt;int  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="293" width="4.9" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1025.99" y="303.5" ></text>
</g>
<g >
<title>UWorkStealingQueue::trySteal (797,979,790 samples, 0.10%)</title><rect x="319.8" y="373" width="1.1" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="322.80" y="383.5" ></text>
</g>
<g >
<title>std::deque&lt;UTaskWrapper, std::allocator&lt;UTaskWrapper&gt; &gt;::empty (1,939,393,920 samples, 0.23%)</title><rect x="284.3" y="341" width="2.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="287.35" y="351.5" ></text>
</g>
<g >
<title>CObject::CObject (313,131,310 samples, 0.04%)</title><rect x="75.8" y="357" width="0.5" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="78.84" y="367.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt; (7,676,767,600 samples, 0.93%)</title><rect x="125.4" y="341" width="11.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="128.42" y="351.5" ></text>
</g>
<g >
<title>T05-Param (826,373,729,110 samples, 100.00%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >T05-Param</text>
</g>
<g >
<title>__gthread_mutex_unlock (232,323,230 samples, 0.03%)</title><rect x="179.9" y="325" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="182.88" y="335.5" ></text>
</g>
<g >
<title>pthread_mutex_trylock@plt (212,121,210 samples, 0.03%)</title><rect x="253.5" y="325" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="256.47" y="335.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (70,707,070 samples, 0.01%)</title><rect x="1025.8" y="53" width="0.1" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1028.76" y="63.5" ></text>
</g>
<g >
<title>__raw_spin_unlock_irq (21,878,787,660 samples, 2.65%)</title><rect x="684.4" y="261" width="31.2" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="687.36" y="271.5" >__..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (111,111,110 samples, 0.01%)</title><rect x="1026.1" y="165" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1029.08" y="175.5" ></text>
</g>
<g >
<title>__gthread_mutex_trylock (363,636,360 samples, 0.04%)</title><rect x="211.0" y="341" width="0.6" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="214.05" y="351.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (111,111,110 samples, 0.01%)</title><rect x="891.7" y="373" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="894.68" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, GParam*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt; &gt; &gt;::find (595,959,590 samples, 0.07%)</title><rect x="1023.5" y="149" width="0.9" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1026.54" y="159.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::_Tuple_impl (373,737,370 samples, 0.05%)</title><rect x="81.6" y="309" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="84.60" y="319.5" ></text>
</g>
<g >
<title>__gthread_yield (14,545,454,400 samples, 1.76%)</title><rect x="320.9" y="373" width="20.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="323.94" y="383.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (262,626,260 samples, 0.03%)</title><rect x="10.3" y="469" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="13.29" y="479.5" ></text>
</g>
<g >
<title>[unknown] (747,474,740 samples, 0.09%)</title><rect x="1032.8" y="469" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1035.81" y="479.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::do_put (80,808,080 samples, 0.01%)</title><rect x="1033.4" y="453" width="0.1" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="1036.38" y="463.5" ></text>
</g>
<g >
<title>schedule (126,616,160,350 samples, 15.32%)</title><rect x="671.3" y="293" width="180.8" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="674.32" y="303.5" >schedule</text>
</g>
<g >
<title>__sched_text_start (121,989,897,770 samples, 14.76%)</title><rect x="677.9" y="277" width="174.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="680.92" y="287.5" >__sched_text_start</text>
</g>
<g >
<title>MyWriteParamNode::run (1,080,808,070 samples, 0.13%)</title><rect x="1025.3" y="197" width="1.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1028.28" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (90,909,090 samples, 0.01%)</title><rect x="1026.1" y="133" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1029.08" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (262,838,381,210 samples, 31.81%)</title><rect x="494.3" y="325" width="375.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="497.33" y="335.5" >do_syscall_64</text>
</g>
<g >
<title>UWorkStealingQueue::trySteal (17,676,767,500 samples, 2.14%)</title><rect x="280.9" y="357" width="25.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="283.89" y="367.5" >U..</text>
</g>
<g >
<title>std::operator==&lt;UTaskWrapper, UTaskWrapper&amp;, UTaskWrapper*&gt; (1,292,929,280 samples, 0.16%)</title><rect x="285.3" y="325" width="1.8" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="288.27" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_write (151,515,150 samples, 0.02%)</title><rect x="887.1" y="437" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="890.14" y="447.5" ></text>
</g>
<g >
<title>_IO_fwrite (585,858,580 samples, 0.07%)</title><rect x="1034.2" y="501" width="0.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1037.17" y="511.5" ></text>
</g>
<g >
<title>pty_write (2,575,757,550 samples, 0.31%)</title><rect x="891.9" y="357" width="3.7" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="894.88" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (141,414,140 samples, 0.02%)</title><rect x="1025.7" y="85" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1028.69" y="95.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (181,818,180 samples, 0.02%)</title><rect x="896.0" y="357" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="899.03" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (70,707,070 samples, 0.01%)</title><rect x="1023.6" y="101" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1026.60" y="111.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (484,848,480 samples, 0.06%)</title><rect x="180.9" y="309" width="0.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="183.90" y="319.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (141,414,140 samples, 0.02%)</title><rect x="184.4" y="197" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="187.44" y="207.5" ></text>
</g>
<g >
<title>__gthread_mutex_trylock (616,161,610 samples, 0.07%)</title><rect x="288.8" y="325" width="0.9" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="291.81" y="335.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::_M_head (2,303,030,280 samples, 0.28%)</title><rect x="122.1" y="293" width="3.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="125.13" y="303.5" ></text>
</g>
<g >
<title>std::mutex::unlock (313,131,310 samples, 0.04%)</title><rect x="203.7" y="341" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="206.66" y="351.5" ></text>
</g>
<g >
<title>schedule (80,808,080 samples, 0.01%)</title><rect x="141.0" y="197" width="0.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="143.95" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (57,909,090,330 samples, 7.01%)</title><rect x="1107.1" y="469" width="82.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1110.14" y="479.5" >do_syscal..</text>
</g>
<g >
<title>__x64_sys_futex (9,030,302,940 samples, 1.09%)</title><rect x="183.7" y="261" width="12.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="186.75" y="271.5" ></text>
</g>
<g >
<title>[unknown] (959,595,950 samples, 0.12%)</title><rect x="883.8" y="485" width="1.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="886.76" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::sync (90,909,090 samples, 0.01%)</title><rect x="1026.9" y="197" width="0.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1029.88" y="207.5" ></text>
</g>
<g >
<title>UTaskWrapper::~UTaskWrapper (10,333,333,230 samples, 1.25%)</title><rect x="31.9" y="389" width="14.7" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="34.88" y="399.5" ></text>
</g>
<g >
<title>avc_has_perm (292,929,290 samples, 0.04%)</title><rect x="888.7" y="373" width="0.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="891.74" y="383.5" ></text>
</g>
<g >
<title>get_futex_value_locked (141,414,140 samples, 0.02%)</title><rect x="141.3" y="197" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="144.33" y="207.5" ></text>
</g>
<g >
<title>std::mutex::unlock (383,838,380 samples, 0.05%)</title><rect x="307.5" y="357" width="0.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="310.47" y="367.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::shared_mutex&gt;::unlock (141,414,140 samples, 0.02%)</title><rect x="1026.6" y="165" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1029.63" y="175.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, UTaskWrapper::implBase*, false&gt;::_M_head (242,424,240 samples, 0.03%)</title><rect x="121.8" y="293" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="124.78" y="303.5" ></text>
</g>
<g >
<title>wake_up_q (56,868,686,300 samples, 6.88%)</title><rect x="1108.5" y="405" width="81.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1111.54" y="415.5" >wake_up_q</text>
</g>
<g >
<title>std::pointer_traits&lt;char*&gt;::pointer_to (70,707,070 samples, 0.01%)</title><rect x="1026.3" y="149" width="0.1" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1029.25" y="159.5" ></text>
</g>
<g >
<title>__lll_unlock_wake (10,585,858,480 samples, 1.28%)</title><rect x="181.6" y="309" width="15.1" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="184.60" y="319.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (56,848,484,280 samples, 6.88%)</title><rect x="1108.6" y="373" width="81.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1111.56" y="383.5" >_raw_spin..</text>
</g>
<g >
<title>std::_Head_base&lt;0ul, UTaskWrapper::implBase*, false&gt;::_M_head (959,595,950 samples, 0.12%)</title><rect x="124.0" y="277" width="1.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="127.03" y="287.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;int  (611,414,135,300 samples, 73.99%)</title><rect x="10.7" y="453" width="873.0" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="13.66" y="463.5" >std::thread::_Invoker&lt;std::tuple&lt;int </text>
</g>
<g >
<title>std::_Hash_bytes (111,111,110 samples, 0.01%)</title><rect x="1024.2" y="85" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1027.16" y="95.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,222,222,210 samples, 0.15%)</title><rect x="1028.2" y="469" width="1.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1031.15" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, GParam*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt; &gt; &gt;::find (363,636,360 samples, 0.04%)</title><rect x="1025.5" y="149" width="0.5" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1028.47" y="159.5" ></text>
</g>
<g >
<title>std::operator==&lt;UTaskWrapper, UTaskWrapper&amp;, UTaskWrapper*&gt; (323,232,320 samples, 0.04%)</title><rect x="305.7" y="341" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="308.65" y="351.5" ></text>
</g>
<g >
<title>UThreadPrimary::popTask (373,737,370 samples, 0.05%)</title><rect x="47.0" y="389" width="0.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="50.01" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (57,909,090,330 samples, 7.01%)</title><rect x="1107.1" y="485" width="82.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1110.14" y="495.5" >entry_SYS..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (80,808,080 samples, 0.01%)</title><rect x="1024.6" y="133" width="0.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1027.58" y="143.5" ></text>
</g>
<g >
<title>std::call_once&lt;void  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="469" width="4.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1025.99" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (70,707,070 samples, 0.01%)</title><rect x="1024.6" y="117" width="0.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1027.59" y="127.5" ></text>
</g>
<g >
<title>tty_paranoia_check (393,939,390 samples, 0.05%)</title><rect x="1021.9" y="389" width="0.6" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1024.91" y="399.5" ></text>
</g>
<g >
<title>UThreadObject::~UThreadObject (222,222,220 samples, 0.03%)</title><rect x="208.1" y="373" width="0.3" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="211.06" y="383.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (28,959,595,670 samples, 3.50%)</title><rect x="137.9" y="341" width="41.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="140.94" y="351.5" >std..</text>
</g>
<g >
<title>__libc_enable_asynccancel (151,515,150 samples, 0.02%)</title><rect x="1022.8" y="485" width="0.2" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1025.77" y="495.5" ></text>
</g>
<g >
<title>UThreadObject::UThreadObject (323,232,320 samples, 0.04%)</title><rect x="207.6" y="373" width="0.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="210.60" y="383.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (16,818,181,650 samples, 2.04%)</title><rect x="179.3" y="341" width="24.0" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="182.29" y="351.5" >s..</text>
</g>
<g >
<title>exit_to_usermode_loop (242,424,240 samples, 0.03%)</title><rect x="1106.0" y="453" width="0.4" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1109.04" y="463.5" ></text>
</g>
<g >
<title>GParamManager::get (626,262,620 samples, 0.08%)</title><rect x="1023.5" y="165" width="0.9" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="1026.50" y="175.5" ></text>
</g>
<g >
<title>std::__invoke&lt;int  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="245" width="4.9" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1025.99" y="255.5" ></text>
</g>
<g >
<title>process_echoes (131,313,130 samples, 0.02%)</title><rect x="895.8" y="373" width="0.2" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="898.80" y="383.5" ></text>
</g>
<g >
<title>__pthread_rwlock_wrlock (1,474,747,460 samples, 0.18%)</title><rect x="1029.9" y="485" width="2.1" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1032.91" y="495.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (121,212,120 samples, 0.01%)</title><rect x="1033.2" y="453" width="0.2" height="15.0" fill="rgb(223,82,19)" rx="2" ry="2" />
<text  x="1036.20" y="463.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (242,424,240 samples, 0.03%)</title><rect x="1106.0" y="485" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1109.04" y="495.5" ></text>
</g>
<g >
<title>copy_user_generic_unrolled (272,727,270 samples, 0.03%)</title><rect x="890.8" y="373" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="893.77" y="383.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (585,858,580 samples, 0.07%)</title><rect x="254.4" y="325" width="0.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="257.42" y="335.5" ></text>
</g>
<g >
<title>UAtomicQueue&lt;UTaskWrapper&gt;::tryPop (48,484,848,000 samples, 5.87%)</title><rect x="137.0" y="357" width="69.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="140.04" y="367.5" >UAtomic..</text>
</g>
<g >
<title>queue_work_on (87,616,160,740 samples, 10.60%)</title><rect x="896.3" y="357" width="125.1" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="899.29" y="367.5" >queue_work_on</text>
</g>
<g >
<title>std::__shared_mutex_pthread::unlock_shared (141,414,140 samples, 0.02%)</title><rect x="1025.1" y="149" width="0.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="1028.07" y="159.5" ></text>
</g>
<g >
<title>UThreadPrimary::stealTask (202,020,200 samples, 0.02%)</title><rect x="882.5" y="389" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="885.49" y="399.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (242,424,240 samples, 0.03%)</title><rect x="1106.0" y="469" width="0.4" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1109.04" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (111,111,110 samples, 0.01%)</title><rect x="1024.6" y="149" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1027.56" y="159.5" ></text>
</g>
<g >
<title>unroll_tree_refs (676,767,670 samples, 0.08%)</title><rect x="863.3" y="277" width="1.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="866.32" y="287.5" ></text>
</g>
<g >
<title>wake_up_q (8,272,727,190 samples, 1.00%)</title><rect x="184.8" y="213" width="11.8" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="187.83" y="223.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, UTaskWrapper::implBase*, false&gt;::_Head_base (212,121,210 samples, 0.03%)</title><rect x="80.6" y="293" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="83.56" y="303.5" ></text>
</g>
<g >
<title>futex_wait_setup (90,909,090 samples, 0.01%)</title><rect x="1029.7" y="389" width="0.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1032.70" y="399.5" ></text>
</g>
<g >
<title>std::shared_lock&lt;std::shared_mutex&gt;::~shared_lock (151,515,150 samples, 0.02%)</title><rect x="1025.1" y="181" width="0.2" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="1028.05" y="191.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (70,707,070 samples, 0.01%)</title><rect x="120.9" y="309" width="0.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="123.87" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (141,414,140 samples, 0.02%)</title><rect x="1024.1" y="101" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1027.14" y="111.5" ></text>
</g>
<g >
<title>do_futex (919,191,910 samples, 0.11%)</title><rect x="1028.5" y="421" width="1.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1031.51" y="431.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (101,010,100 samples, 0.01%)</title><rect x="882.3" y="341" width="0.2" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="885.35" y="351.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;int, int  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="229" width="4.9" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="1025.99" y="239.5" ></text>
</g>
<g >
<title>UThreadPrimary::runTask (161,616,160 samples, 0.02%)</title><rect x="883.5" y="405" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="886.49" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (262,626,260 samples, 0.03%)</title><rect x="1023.7" y="117" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1026.74" y="127.5" ></text>
</g>
<g >
<title>do_syscall_64 (9,797,979,700 samples, 1.19%)</title><rect x="182.7" y="277" width="14.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="185.72" y="287.5" ></text>
</g>
<g >
<title>__strlen_avx2 (181,818,180 samples, 0.02%)</title><rect x="1032.2" y="453" width="0.2" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1035.18" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (111,111,110 samples, 0.01%)</title><rect x="1023.6" y="117" width="0.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1026.58" y="127.5" ></text>
</g>
<g >
<title>std::_Bind&lt;int  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="277" width="4.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="1025.99" y="287.5" ></text>
</g>
<g >
<title>security_file_permission (787,878,780 samples, 0.10%)</title><rect x="888.5" y="405" width="1.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="891.52" y="415.5" ></text>
</g>
<g >
<title>std::tuple&lt;UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::tuple&lt;UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt;, true&gt; (757,575,750 samples, 0.09%)</title><rect x="82.1" y="341" width="1.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="85.13" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;UThreadPrimary*, std::allocator&lt;UThreadPrimary*&gt; &gt;::size (1,010,101,000 samples, 0.12%)</title><rect x="310.2" y="357" width="1.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="313.15" y="367.5" ></text>
</g>
<g >
<title>std::__invoke&lt;int  (611,414,135,300 samples, 73.99%)</title><rect x="10.7" y="437" width="873.0" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="13.66" y="447.5" >std::__invoke&lt;int </text>
</g>
<g >
<title>std::unique_ptr&lt;UTaskWrapper::implBase, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::unique_ptr&lt;std::default_delete&lt;UTaskWrapper::implBase&gt;, void&gt; (3,292,929,260 samples, 0.40%)</title><rect x="78.5" y="357" width="4.7" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="81.51" y="367.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (101,010,100 samples, 0.01%)</title><rect x="1022.6" y="485" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1025.63" y="495.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (292,929,290 samples, 0.04%)</title><rect x="493.8" y="341" width="0.5" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="496.84" y="351.5" ></text>
</g>
<g >
<title>std::shared_mutex::unlock_shared (141,414,140 samples, 0.02%)</title><rect x="1025.1" y="165" width="0.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1028.07" y="175.5" ></text>
</g>
<g >
<title>__audit_syscall_entry (1,262,626,250 samples, 0.15%)</title><rect x="867.2" y="293" width="1.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="870.20" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (535,353,530 samples, 0.06%)</title><rect x="1032.0" y="469" width="0.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1035.05" y="479.5" ></text>
</g>
<g >
<title>_IO_fwrite (101,010,100 samples, 0.01%)</title><rect x="1032.8" y="453" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1035.81" y="463.5" ></text>
</g>
<g >
<title>bpf_lsm_file_permission (131,313,130 samples, 0.02%)</title><rect x="888.5" y="389" width="0.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="891.55" y="399.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt; (2,757,575,730 samples, 0.33%)</title><rect x="121.5" y="309" width="3.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="124.48" y="319.5" ></text>
</g>
<g >
<title>__sched_yield (351,282,824,770 samples, 42.51%)</title><rect x="368.5" y="357" width="501.6" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="371.54" y="367.5" >__sched_yield</text>
</g>
<g >
<title>virtual thunk to std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ostream (747,474,740 samples, 0.09%)</title><rect x="1032.8" y="485" width="1.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1035.81" y="495.5" ></text>
</g>
<g >
<title>[unknown] (105,161,615,110 samples, 12.73%)</title><rect x="883.7" y="501" width="150.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="886.72" y="511.5" >[unknown]</text>
</g>
<g >
<title>CObject::~CObject (262,626,260 samples, 0.03%)</title><rect x="85.7" y="357" width="0.4" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="88.68" y="367.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="421" width="4.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1025.99" y="431.5" ></text>
</g>
<g >
<title>__gthread_active_p (363,636,360 samples, 0.04%)</title><rect x="291.8" y="325" width="0.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="294.76" y="335.5" ></text>
</g>
<g >
<title>__sched_text_start (636,363,630 samples, 0.08%)</title><rect x="1028.8" y="357" width="0.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1031.79" y="367.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::shared_mutex&gt;::~unique_lock (141,414,140 samples, 0.02%)</title><rect x="1026.6" y="181" width="0.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1029.63" y="191.5" ></text>
</g>
<g >
<title>std::ostream::flush (101,010,100 samples, 0.01%)</title><rect x="1027.5" y="197" width="0.1" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1030.48" y="207.5" ></text>
</g>
<g >
<title>std::deque&lt;UTaskWrapper, std::allocator&lt;UTaskWrapper&gt; &gt;::empty (383,838,380 samples, 0.05%)</title><rect x="306.2" y="357" width="0.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="309.16" y="367.5" ></text>
</g>
<g >
<title>std::mutex::lock (28,383,838,100 samples, 3.43%)</title><rect x="138.8" y="325" width="40.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="141.76" y="335.5" >std..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::_Tuple_impl (969,696,960 samples, 0.12%)</title><rect x="80.2" y="309" width="1.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="83.21" y="319.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;1ul, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::_Tuple_impl (353,535,350 samples, 0.04%)</title><rect x="81.1" y="293" width="0.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="84.09" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (111,111,110 samples, 0.01%)</title><rect x="1026.1" y="149" width="0.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1029.08" y="159.5" ></text>
</g>
<g >
<title>__gthread_yield (16,404,040,240 samples, 1.99%)</title><rect x="345.1" y="357" width="23.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="348.12" y="367.5" >_..</text>
</g>
<g >
<title>futex_wait (848,484,840 samples, 0.10%)</title><rect x="1028.6" y="405" width="1.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1031.62" y="415.5" ></text>
</g>
<g >
<title>__sched_text_start (80,808,080 samples, 0.01%)</title><rect x="141.0" y="181" width="0.1" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="143.95" y="191.5" ></text>
</g>
<g >
<title>UAtomicQueue&lt;UTaskWrapper&gt;::tryPop (161,616,160 samples, 0.02%)</title><rect x="74.2" y="373" width="0.2" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="77.16" y="383.5" ></text>
</g>
<g >
<title>do_output_char (2,606,060,580 samples, 0.32%)</title><rect x="891.8" y="373" width="3.8" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="894.84" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (202,020,200 samples, 0.02%)</title><rect x="1024.5" y="181" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1027.55" y="191.5" ></text>
</g>
<g >
<title>__fdget_pos (494,949,490 samples, 0.06%)</title><rect x="887.4" y="421" width="0.7" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="890.41" y="431.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (111,111,110 samples, 0.01%)</title><rect x="178.9" y="261" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="181.87" y="271.5" ></text>
</g>
<g >
<title>dput (161,616,160 samples, 0.02%)</title><rect x="863.0" y="261" width="0.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="866.01" y="271.5" ></text>
</g>
<g >
<title>n_tty_write (91,505,049,590 samples, 11.07%)</title><rect x="891.2" y="389" width="130.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="894.17" y="399.5" >n_tty_write</text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (161,616,160 samples, 0.02%)</title><rect x="1032.4" y="453" width="0.3" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1035.44" y="463.5" ></text>
</g>
<g >
<title>GCluster::process (3,383,838,350 samples, 0.41%)</title><rect x="1023.0" y="213" width="4.8" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1025.99" y="223.5" ></text>
</g>
<g >
<title>std::operator==&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;, std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;&amp;, std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;*&gt; (535,353,530 samples, 0.06%)</title><rect x="205.5" y="325" width="0.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="208.51" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (232,323,230 samples, 0.03%)</title><rect x="1026.1" y="181" width="0.3" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1029.06" y="191.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;UTaskWrapper::implBase, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt;::__uniq_ptr_impl (1,030,303,020 samples, 0.12%)</title><rect x="77.0" y="357" width="1.5" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="80.04" y="367.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (363,636,360 samples, 0.04%)</title><rect x="206.6" y="357" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="209.59" y="367.5" ></text>
</g>
<g >
<title>UWorkStealingQueue::tryPop (41,898,989,480 samples, 5.07%)</title><rect x="209.2" y="357" width="59.8" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="212.20" y="367.5" >UWorkS..</text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (8,474,747,390 samples, 1.03%)</title><rect x="293.0" y="325" width="12.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="296.00" y="335.5" ></text>
</g>
<g >
<title>std::queue&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;, std::deque&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;UTaskWrapper, std::default_delete&lt;UTaskWrapper&gt; &gt; &gt; &gt; &gt;::empty (1,515,151,500 samples, 0.18%)</title><rect x="204.1" y="341" width="2.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="207.11" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (181,818,180 samples, 0.02%)</title><rect x="1023.9" y="69" width="0.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1026.86" y="79.5" ></text>
</g>
<g >
<title>GElement::getGParam&lt;MyParam1&gt; (686,868,680 samples, 0.08%)</title><rect x="1023.5" y="181" width="0.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1026.45" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,111,111,100 samples, 0.13%)</title><rect x="1030.4" y="453" width="1.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1033.43" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (585,858,580 samples, 0.07%)</title><rect x="1023.5" y="133" width="0.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1026.54" y="143.5" ></text>
</g>
<g >
<title>futex_wait (424,242,420 samples, 0.05%)</title><rect x="140.9" y="229" width="0.6" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="143.94" y="239.5" ></text>
</g>
<g >
<title>__gthread_active_p (8,282,828,200 samples, 1.00%)</title><rect x="225.8" y="309" width="11.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="228.85" y="319.5" ></text>
</g>
<g >
<title>pthread_mutex_lock@plt (181,818,180 samples, 0.02%)</title><rect x="179.0" y="309" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="182.03" y="319.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (505,050,500 samples, 0.06%)</title><rect x="292.3" y="325" width="0.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="295.28" y="335.5" ></text>
</g>
<g >
<title>futex_wake (57,171,716,600 samples, 6.92%)</title><rect x="1108.1" y="421" width="81.6" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1111.10" y="431.5" >futex_wake</text>
</g>
<g >
<title>pthread_mutex_unlock@plt (191,919,190 samples, 0.02%)</title><rect x="203.0" y="309" width="0.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="206.03" y="319.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (80,808,080 samples, 0.01%)</title><rect x="341.6" y="325" width="0.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="344.60" y="335.5" ></text>
</g>
<g >
<title>schedule (656,565,650 samples, 0.08%)</title><rect x="1028.8" y="373" width="0.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1031.76" y="383.5" ></text>
</g>
<g >
<title>__mempcpy_avx_unaligned (161,616,160 samples, 0.02%)</title><rect x="1035.4" y="501" width="0.2" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1038.35" y="511.5" ></text>
</g>
<g >
<title>sched_yield@plt (191,919,190 samples, 0.02%)</title><rect x="870.1" y="357" width="0.3" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="873.14" y="367.5" ></text>
</g>
<g >
<title>GElement::getGParam&lt;MyParam1&gt; (444,444,440 samples, 0.05%)</title><rect x="1025.4" y="181" width="0.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1028.36" y="191.5" ></text>
</g>
<g >
<title>queue_work_on (2,454,545,430 samples, 0.30%)</title><rect x="892.0" y="341" width="3.5" height="15.0" fill="rgb(248,200,48)" rx="2" ry="2" />
<text  x="895.03" y="351.5" ></text>
</g>
<g >
<title>UTaskWrapper::~UTaskWrapper (37,242,423,870 samples, 4.51%)</title><rect x="83.2" y="373" width="53.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="86.21" y="383.5" >UTask..</text>
</g>
<g >
<title>std::__invoke_impl&lt;int, int  (611,414,135,300 samples, 73.99%)</title><rect x="10.7" y="421" width="873.0" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="13.66" y="431.5" >std::__invoke_impl&lt;int, int </text>
</g>
<g >
<title>mntput (262,626,260 samples, 0.03%)</title><rect x="862.3" y="277" width="0.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="865.26" y="287.5" ></text>
</g>
<g >
<title>_IO_putc (323,232,320 samples, 0.04%)</title><rect x="884.0" y="469" width="0.5" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="887.02" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (191,919,190 samples, 0.02%)</title><rect x="1023.8" y="85" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1026.84" y="95.5" ></text>
</g>
<g >
<title>__x64_sys_futex (464,646,460 samples, 0.06%)</title><rect x="140.9" y="261" width="0.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="143.88" y="271.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;  (3,424,242,390 samples, 0.41%)</title><rect x="1023.0" y="357" width="4.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1025.99" y="367.5" ></text>
</g>
<g >
<title>UThreadObject::UThreadObject (525,252,520 samples, 0.06%)</title><rect x="76.3" y="357" width="0.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="79.29" y="367.5" ></text>
</g>
<g >
<title>std::mutex::try_lock (2,949,494,920 samples, 0.36%)</title><rect x="287.1" y="341" width="4.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="290.12" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, GParam*&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (161,616,160 samples, 0.02%)</title><rect x="1024.1" y="117" width="0.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1027.12" y="127.5" ></text>
</g>
<g >
<title>__GI___libc_write (96,191,918,230 samples, 11.64%)</title><rect x="885.3" y="485" width="137.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="888.27" y="495.5" >__GI___libc_write</text>
</g>
<g >
<title>pty_write (87,868,685,990 samples, 10.63%)</title><rect x="896.0" y="373" width="125.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="898.99" y="383.5" >pty_write</text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (8,272,727,190 samples, 1.00%)</title><rect x="184.8" y="181" width="11.8" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="187.83" y="191.5" ></text>
</g>
<g >
<title>__pthread_mutex_lock (26,212,120,950 samples, 3.17%)</title><rect x="141.6" y="309" width="37.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="144.60" y="319.5" >__p..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (80,808,080 samples, 0.01%)</title><rect x="1026.2" y="165" width="0.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1029.24" y="175.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, UTaskWrapper::implBase*, std::default_delete&lt;UTaskWrapper::implBase&gt; &gt; (8,939,393,850 samples, 1.08%)</title><rect x="108.2" y="325" width="12.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="111.21" y="335.5" ></text>
</g>
<g >
<title>__vfs_write (70,707,070 samples, 0.01%)</title><rect x="888.2" y="405" width="0.1" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="891.23" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (611,868,680,750 samples, 74.04%)</title><rect x="10.0" y="501" width="873.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="13.01" y="511.5" >[libstdc++.so.6.0.25]</text>
</g>
<g >
<title>__pthread_mutex_unlock (2,181,818,160 samples, 0.26%)</title><rect x="255.3" y="325" width="3.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="258.26" y="335.5" ></text>
</g>
<g >
<title>__gthread_active_p (303,030,300 samples, 0.04%)</title><rect x="288.4" y="325" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="291.37" y="335.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::shared_mutex&gt;::unique_lock (141,414,140 samples, 0.02%)</title><rect x="1026.4" y="181" width="0.2" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1029.41" y="191.5" ></text>
</g>
</g>
</svg>
